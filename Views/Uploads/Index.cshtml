@{
    ViewData["Title"] = "Upload de Arquivos";
    var arquivos = ViewBag.Arquivos as List<MeuSiteLogin.Models.Arquivo> ?? new List<MeuSiteLogin.Models.Arquivo>();
}

<div class="space-y-8 max-w-4xl mx-auto mt-10">

    @if (TempData["Mensagem"] != null)
    {
        <div class="bg-green-100 text-green-800 px-4 py-2 rounded mb-4 border border-green-300">
            @TempData["Mensagem"]
        </div>
    }

    <div>
        <h1 class="text-3xl font-bold text-slate-900">Upload de Arquivos</h1>
        <p class="mt-1 text-slate-600">Envie seus arquivos de áudio ou vídeo para armazenar com segurança.</p>
    </div>

    <div class="bg-white p-6 rounded-2xl shadow-lg transition-shadow hover:shadow-xl">
        <h2 class="text-xl font-bold text-slate-800 mb-4">Enviar Novo Arquivo</h2>

        <p id="nome-arquivo" class="text-sm text-indigo-600 mt-2 font-medium"></p>

        <form id="upload-form" method="post" enctype="multipart/form-data">
            <div class="flex items-center justify-center w-full">
                <label for="dropzone-file" class="flex flex-col items-center justify-center w-full h-64 border-2 border-slate-300 border-dashed rounded-lg cursor-pointer bg-slate-50 hover:bg-slate-100 transition">
                    <div class="flex flex-col items-center justify-center pt-5 pb-6">
                        <svg class="w-10 h-10 mb-4 text-indigo-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2" />
                        </svg>
                        <p class="mb-2 text-sm text-slate-600"><span class="font-semibold">Clique para enviar</span> ou arraste e solte</p>
                        <p class="text-xs text-slate-500">MP3, WAV, MP4, MOV (máx. 500MB)</p>
                    </div>
                    <input id="dropzone-file" name="arquivo" type="file" class="hidden" required />
                </label>
            </div>
            <div class="mt-6 flex justify-end">
                <button id="upload-btn" type="submit" class="flex items-center justify-center rounded-lg bg-indigo-600 px-5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-600 transition disabled:bg-indigo-400 disabled:cursor-not-allowed">
                    Fazer Upload
                </button>
            </div>
        </form>
    </div>

    <div>
        <h2 class="text-xl font-bold text-slate-800 mb-4">Arquivos Recentes</h2>

        @if (arquivos.Any())
        {
            <div class="space-y-3">
                @foreach (var item in arquivos)
                {
                    <div class="bg-white p-4 rounded-lg shadow-sm border border-slate-200 flex items-center justify-between hover:border-indigo-300 hover:shadow-md transition">
                        <div class="flex items-center gap-4">
                            <div class="bg-indigo-100 p-2 rounded-lg">
                                <svg class="w-6 h-6 text-indigo-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M14.5 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V7.5L14.5 2z" />
                                    <polyline points="14 2 14 8 20 8" />
                                </svg>
                            </div>
                            <div>
                                <a href="@Url.Action("Download", "Uploads", new { id = item.Id })" target="_blank" class="font-semibold text-slate-800 hover:text-indigo-600 transition-colors">
                                    @item.NomeOriginal
                                </a>
                                <p class="text-sm text-slate-500">
                                    Enviado em: @item.DataEnvio.ToLocalTime().ToString("dd/MM/yyyy 'às' HH:mm")
                                </p>
                            </div>
                        </div>

                        <div class="flex items-center">
                            <a href="@Url.Action("Download", "Uploads", new { id = item.Id })" title="Baixar Arquivo" class="p-2 text-slate-500 hover:text-indigo-600 rounded-full hover:bg-slate-100 transition-colors">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4M7 10l5 5 5-5M12 15V3" />
                                </svg>
                            </a>
                            
                            <form asp-action="Excluir" asp-controller="Uploads" asp-route-id="@item.Id" method="post" class="inline delete-form">
                                <button type="submit" title="Excluir Arquivo" class="ml-2 p-2 text-red-500 hover:text-red-600 rounded-full hover:bg-red-50 transition-colors">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </form>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-12 px-6 bg-slate-50 rounded-lg border-2 border-dashed border-slate-200">
                <svg class="mx-auto h-12 w-12 text-slate-400" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                </svg>
                <h3 class="mt-2 text-lg font-medium text-slate-900">Nenhum arquivo enviado</h3>
                <p class="mt-1 text-sm text-slate-500">Comece enviando seu primeiro arquivo para vê-lo listado aqui.</p>
            </div>
        }
    </div>
</div>

<div id="delete-modal" class="fixed inset-0 z-50 hidden items-center justify-center p-4" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div id="delete-modal-backdrop" class="fixed inset-0 bg-slate-900/60 backdrop-blur-sm transition-opacity duration-300 ease-in-out" aria-hidden="true"></div>

    <div id="delete-modal-panel" class="relative w-full max-w-md transform rounded-2xl bg-white p-6 text-left shadow-xl transition-all duration-300 ease-in-out">
        <div class="sm:flex sm:items-start">
            <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                </svg>
            </div>
            <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                <h3 class="text-base font-semibold leading-6 text-slate-900" id="modal-title">Excluir Arquivo</h3>
                <div class="mt-2">
                    <p class="text-sm text-slate-500">Você tem certeza que deseja excluir este arquivo? Esta ação não pode ser desfeita.</p>
                </div>
            </div>
        </div>
        <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
            <button type="button" id="confirm-delete-btn" class="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto">
                Sim, Excluir
            </button>
            <button type="button" id="cancel-delete-btn" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-slate-900 shadow-sm ring-1 ring-inset ring-slate-300 hover:bg-slate-50 sm:mt-0 sm:w-auto">
                Cancelar
            </button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // --- Seletores de Elementos ---
        const inputArquivo = document.getElementById('dropzone-file');
        const pNomeArquivo = document.getElementById('nome-arquivo');
        const uploadForm = document.getElementById('upload-form');
        const uploadButton = document.getElementById('upload-btn');
        const deleteModal = document.getElementById('delete-modal');
        const modalBackdrop = document.getElementById('delete-modal-backdrop');
        const modalPanel = document.getElementById('delete-modal-panel');
        const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
        const cancelDeleteBtn = document.getElementById('cancel-delete-btn');
        const deleteForms = document.querySelectorAll('.delete-form');
        let formParaExcluir = null;

        // --- Lógica para Exibir Nome do Arquivo Selecionado ---
        if (inputArquivo) {
            inputArquivo.addEventListener('change', () => {
                if (inputArquivo.files.length > 0) {
                    pNomeArquivo.textContent = `Arquivo selecionado: ${inputArquivo.files[0].name}`;
                } else {
                    pNomeArquivo.textContent = '';
                }
            });
        }

        // --- Lógica para Feedback Visual no Upload ---
        if (uploadForm && uploadButton) {
            uploadForm.addEventListener('submit', (e) => {
                // Apenas mostra o feedback se um arquivo foi realmente selecionado
                if (inputArquivo.files.length > 0) {
                    uploadButton.disabled = true;

                    // Adiciona um spinner e atualiza o texto
                    uploadButton.innerHTML = `
                        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Enviando...`;
                }
            });
        }
        
        // --- Lógica para o Modal de Confirmação de Exclusão ---
        const mostrarModal = () => {
            deleteModal.classList.remove('hidden');
            deleteModal.classList.add('flex');
            // Animação de entrada
            modalBackdrop.classList.remove('opacity-0');
            modalBackdrop.classList.add('opacity-100');
            modalPanel.classList.remove('opacity-0', 'translate-y-4', 'sm:scale-95');
            modalPanel.classList.add('opacity-100', 'translate-y-0', 'sm:scale-100');
        };

        const esconderModal = () => {
            // Animação de saída
            modalBackdrop.classList.remove('opacity-100');
            modalBackdrop.classList.add('opacity-0');
            modalPanel.classList.remove('opacity-100', 'translate-y-0', 'sm:scale-100');
            modalPanel.classList.add('opacity-0', 'translate-y-4', 'sm:scale-95');
            
            // Esconde o modal após a animação e reseta o botão
            setTimeout(() => {
                deleteModal.classList.add('hidden');
                deleteModal.classList.remove('flex');
                confirmDeleteBtn.disabled = false;
                confirmDeleteBtn.innerHTML = 'Sim, Excluir';
            }, 300); // Deve ser igual à duração da transição CSS
        };

        deleteForms.forEach(form => {
            form.addEventListener('submit', (event) => {
                event.preventDefault(); // Previne o envio imediato do formulário
                formParaExcluir = event.target; // Guarda o formulário que acionou o evento
                mostrarModal();
            });
        });

        confirmDeleteBtn.addEventListener('click', () => {
            if (formParaExcluir) {
                // Feedback visual no botão de exclusão
                confirmDeleteBtn.disabled = true;
                confirmDeleteBtn.innerHTML = 'Excluindo...';
                
                formParaExcluir.submit(); // Envia o formulário guardado
            }
        });

        cancelDeleteBtn.addEventListener('click', esconderModal);
        modalBackdrop.addEventListener('click', esconderModal);
    });
</script>